plugins {
    id 'java'
    id 'io.qameta.allure' version '2.9.6'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}


ext {
    jupiterVersion = '5.9.0'
    jUnitVersion = '4.13.1'
    restAssuredVersion = '4.3.1'
    slf4jVersion = '2.0.5'
    hamcrestVersion = '1.3'
    jsonVersion = '20220924'
    jsonschemavalidatorVersion = '3.0.0'
    tesultsVersion = '1.0.2'
    allureVersion = '2.20.0'
    aspectjweaverVersion = '1.9.9.1'
}

allure {
    version = "$rootProject.ext.allureVersion"
    autoconfigure = true
    aspectjweaver = true
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$rootProject.ext.jupiterVersion"
    testImplementation "junit:junit:$rootProject.ext.jUnitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$rootProject.ext.jupiterVersion"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$rootProject.ext.jupiterVersion"
    implementation "org.slf4j:slf4j-simple:$rootProject.ext.slf4jVersion"
    implementation "com.tesults:tesults:$rootProject.ext.tesultsVersion"
    implementation group: 'io.rest-assured', name: 'rest-assured', version: "$rootProject.ext.restAssuredVersion"
    implementation group: 'org.hamcrest', name: 'hamcrest-all', version: "$rootProject.ext.hamcrestVersion"
    implementation group: 'org.json', name: 'json', version: "$rootProject.ext.jsonVersion"
    implementation group: 'io.rest-assured', name: 'json-schema-validator', version: "$rootProject.ext.jsonschemavalidatorVersion"
    implementation "io.qameta.allure:allure-junit5:$rootProject.ext.allureVersion"
    implementation "io.qameta.allure:allure-commandline:$rootProject.ext.allureVersion"
    implementation "io.qameta.allure:allure-assertj:$rootProject.ext.allureVersion"
    implementation "io.qameta.allure:allure-rest-assured:$rootProject.ext.allureVersion"
    implementation "io.qameta.allure:allure-java-commons:$rootProject.ext.allureVersion"
    implementation "org.aspectj:aspectjweaver:$rootProject.ext.aspectjweaverVersion"
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    systemProperties System.properties

    filter {
        /**
         * Filtramos los test solo para ejecutar el RunnerSuite
         * Correr en consola:
         * -> gradle clean test #Ejecuta el suitest
         * -> gradle allureServe #Ejecuta el reporte
         **/
        excludeTestsMatching "testSuites.*"
        //excludeTestsMatching "*.testName" Exclude una Suite
        //excludeTestsMatching "*.testName.nombreMetodo" Exclude un metodo de una Suite
    }
}